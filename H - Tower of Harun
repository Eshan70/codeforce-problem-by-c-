#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
 
int main() {
    int t;
    cin >> t;
 
    while (t--) {
        int n;
        cin >> n;
 
        vector<int> rings(n);
        for (int i = 0; i < n; i++) {
            cin >> rings[i];
        }
 
        // Vector to store the top ring of each tower
        vector<int> towers;
 
        for (int i = 0; i < n; i++) {
            // Binary search for the first tower where the top ring is >= rings[i]
            auto it = lower_bound(towers.begin(), towers.end(), rings[i]);
            if (it != towers.end()) {
                // If such a tower is found, replace the top of that tower with rings[i]
                *it = rings[i];
            } else {
                // If no such tower exists, start a new tower
                towers.push_back(rings[i]);
            }
        }
 
        // The number of towers is the size of the `towers` vector
        cout << towers.size() << endl;
    }
 
    return 0;
}
